import copy
import warnings
from argparse import ArgumentParser

import numpy as np
import zss
from SRToolkit.dataset import SRBenchmark
from SRToolkit.utils import generate_n_expressions
import matplotlib.pyplot as plt
import editdistance
import json

from bed import BED
from utils import tokens_to_tree, expr_to_zss

warnings.filterwarnings('ignore')

def generate_batch(num_expressions, generator):
    expressions = []
    for i in range(num_expressions):
        expressions.append(generator.generate_one(seed=np.random.randint(2**32 - 1))[0])
    return expressions


def calculate_distances(best_exprs, new_exprs, distance, X):
    distance_matrix = np.zeros((len(best_exprs), len(new_exprs)))
    points = X[np.random.permutation(X.shape[0])[:32]]
    for i in range(len(best_exprs)):
        for j in range(i+1, len(new_exprs)):
            distance_matrix[i, j] = distance(best_exprs[i], new_exprs[j], points)
    return distance_matrix


def select_best(distance_matrix, num_selected):
    avg_distance = np.min(distance_matrix, axis=0)
    return np.argsort(avg_distance)[:num_selected]


def calculate_error(exprs, evaluator):
    errors = []
    for expr in exprs:
        try:
            errors.append(evaluator.evaluate_expr(expr))
        except Exception as e:
            errors.append(np.inf)
    return errors


def get_n_best(previous, new, errors_previous, errors_new, number_best):
    all_exprs = previous + new
    all_errors = errors_previous + errors_new
    indices = np.argsort(all_errors)[:number_best]
    return [all_exprs[i] for i in indices], [all_errors[i] for i in indices]


def initialize_heuristic_search(expressions, data=None):
    pass

def heuristic_search(iterations, number_best, number_new, number_selected, expressions, distance, dataset, evaluator, bi=False):
    errors_by_iteration = []
    best_error = np.inf
    iteration = 0
    initialize_heuristic_search(expressions[: number_new], data=dataset.X[np.random.permutation(len(dataset.X))[:64],:])
    new_expressions = expressions[:number_new]
    errors = calculate_error(new_expressions, evaluator)
    for error in errors:
        iteration += 1
        if error < best_error:
            best_error = error
            errors_by_iteration.append((best_error, iteration))

    best_expressions, best_errors = get_n_best([], new_expressions, [], errors, number_best)

    for i in range(1, iterations+1):
        new_expressions = expressions[(i*number_new):((i+1)*number_new)]
        distances = calculate_distances(best_expressions, new_expressions, distance, dataset.X)
        selected_indices = select_best(distances, number_selected)
        selected_expressions = [new_expressions[j] for j in selected_indices]
        errors = calculate_error(selected_expressions, evaluator)
        for error in errors:
            iteration += 1
            if error < best_error:
                best_error = error
                errors_by_iteration.append((best_error, iteration))
        best_expressions, best_errors = get_n_best(best_expressions, selected_expressions, best_errors, errors, number_best)
        if best_errors[0] < 1e-9:
            return errors_by_iteration
        # print(f"Iteration {i+1}, best error: {best_errors[0]}, best expressions: {''.join(best_expressions[0])}")
        # print(best_errors)

    return errors_by_iteration


if __name__ == '__main__':
    parser = ArgumentParser(prog='Simple discovery',
                            description='A script for testing the smoothness of the error landscape')
    parser.add_argument("-dataset", type=str)
    args = parser.parse_args()


    grammar = """
    E -> E '+' F [0.2]
    E -> E '-' F [0.2]
    E -> F [0.6]
    F -> F '*' T [0.2]
    F -> F '/' T [0.2]
    F -> T [0.6]
    T -> R [0.2]
    T -> 'C' [0.2]
    T -> V [0.6]
    R -> '(' E ')' [0.6]
    R -> 'log' '(' E ')' [0.1]
    R -> 'sqrt' '(' E ')' [0.07]
    R -> '(' E ')' '^2' [0.07]
    R -> '(' E ')' '^3' [0.06]
    R -> 'sin' '(' E ')' [0.05]
    R -> 'cos' '(' E ')' [0.05]
    V -> 'X_0' [0.5]
    V -> 'X_1' [0.5]
    """

    all_results = {}
    number_new = 100
    iterations = 50
    number_best = 5
    number_selected = 10
    runs = 10
    # dataset_names = ['II.34.2', 'II.37.1', 'II.8.7', 'III.15.12', 'III.15.14', 'III.15.27', 'III.17.37', 'III.7.38', 'III.8.54', 'I.12.2', 'I.13.4', 'I.15.3t', 'I.15.3x', 'I.18.14', 'I.18.4', 'I.24.6', 'I.29.16', 'I.32.5', 'I.34.8', 'I.38.12', 'I.39.22', 'I.43.16', 'I.43.43', 'I.50.26', 'I.8.14', 'II.11.27', 'II.13.17', 'II.34.11', 'II.38.3', 'II.6.11', 'II.6.15b', 'III.10.19', 'III.13.18', 'III.21.20', 'III.4.32', 'III.4.33', 'I.12.11', 'I.13.12', 'I.41.16', 'I.44.4', 'II.11.20', 'II.11.3', 'II.2.42', 'II.21.32', 'II.34.29b', 'II.35.18', 'II.35.21', 'III.14.14', 'III.19.51', 'I.11.19', 'I.32.17', 'I.40.1', 'II.11.7', 'II.6.15a', 'III.9.52', 'II.36.38', 'I.9.18']]
    feynman_benchmark = SRBenchmark.feynman("../data/feynman")
    print(feynman_benchmark.list_datasets())
    # print(len(dataset_names))
    dataset_name = args.dataset

    print()
    print("-------------------------------")
    print(f"             {dataset_name}           ")
    print("-------------------------------")
    dataset = feynman_benchmark.create_dataset(dataset_name)
    evaluator = dataset.create_evaluator()
    num_variables = dataset.X.shape[1]

    new_grammar = copy.copy(grammar)
    for i in range(num_variables):
        new_grammar += f"\nV -> 'X_{i}' [{1/num_variables}]"
    results_bed = []
    results_edit = []
    results_tree_edit = []

    for i in range(runs):
        np.random.seed(i)
        expressions = generate_n_expressions(new_grammar, num_expressions=(iterations+1)*number_new)
        indices = np.random.permutation(len(expressions))
        expressions = [expressions[j] for j in indices]
        bed_distance = lambda e1, e2, X: BED(expressions=[e1], expressions2=[e2], x=X, x_bounds=[[],[],[]]).calculate_distances()
        edit_distance = lambda e1, e2, X: editdistance.distance(e1, e2)
        tree_edit_distance = lambda e1, e2, X: zss.simple_distance(expr_to_zss(tokens_to_tree(e1)), expr_to_zss(tokens_to_tree(e2)))
        ys_tree = heuristic_search(iterations, number_best, number_new, number_selected, expressions, tree_edit_distance, dataset, evaluator)
        ys_bed = heuristic_search(iterations, number_best, number_new, number_selected, expressions, bed_distance, dataset, evaluator)
        ys_edit = heuristic_search(iterations, number_best, number_new, number_selected, expressions, edit_distance, dataset, evaluator)

        results_tree_edit.append(ys_tree)
        results_edit.append(ys_edit)
        results_bed.append(ys_bed)
        print(f"Run {i}, BED: {ys_bed[-1]}, Edit: {ys_edit[-1]}, Tree: {ys_tree[-1]}")
        # plt.plot(ys_bed)
        # plt.plot(ys_edit)
        # plt.show()

    # print("Results BED", results_bed)
    # print("Results Edit", results_edit)
    # print("Results Tree", results_tree_edit)
    # print(f"BED: {np.mean(results_bed)}, Edit: {np.mean(results_edit)}, Tree: {np.mean(results_tree_edit)}")
    results = {"BED": results_bed, "Edit": results_edit, "Tree": results_tree_edit}

    print(all_results)
    with open(f"../results/simple_discovery/results_exploration_{dataset_name}.json", "w") as file:
        json.dump(results, file)


# I.12.4
# Results BED [0.0967294099981145, 0.10236065300629771, 0.10338494895363898, 0.08893406700470902, 0.0956315877440512, 0.12516502539919253, 0.08884306145382505, 0.09517340695590955, 0.06848682406300556, 0.09589227980212782, 0.010589204003272786, 0.01242456326933811, 0.011144086379239932, 0.011144086299346765, 0.007495342244092905, 0.011804577418448151, 2.37257927537135e-09, 0.014776611090837779, 0.009712462206887373, 0.010468417681029261]
# Results Edit [0.1448557714303181, 0.10740181316281217, 0.14485577143022013, 0.10514932656386726, 0.10758835761300424, 0.14483446912023076, 0.12345740298105211, 0.10261924319375187, 0.10458036061411444, 0.10795436059336158, 0.010589201157291374, 0.015262887330941121, 0.011144086131639913, 0.015145279568507222, 0.015145279665306181, 0.011803881655538946, 0.011340712110189865, 0.015145293782283091, 0.009712461606847196, 0.009927354149614011]
# Results Tree [0.14485577143022038, 0.10740181324898646, 0.14388776274316267, 0.10514927477966224, 0.10758835327149481, 0.14483446906023564, 0.1234573929562123, 0.10261924309371954, 0.10458036149405879, 0.10795436072238894, 0.01058920117607515, 0.015285906282223654, 0.011144086366067677, 0.016550635644294452, 0.015145292060699074, 0.011803828506752469, 0.011340750564679954, 0.015929228479092197, 0.009712469829908569, 0.015145358939812824]
# BED: 0.053008030867297204, Edit: 0.06592566569304457, Tree: 0.06624877803248738

# I.10.7
# Results BED [0.0967294099981145, 0.10236065300629771, 0.10338494895363898, 0.08893406700470902, 0.0956315877440512, 0.12516502539919253, 0.08884306145382505, 0.09517340695590955, 0.06848682406300556, 0.09589227980212782]
# Results Edit [0.1448557714303181, 0.10740181316281217, 0.14485577143022013, 0.10514932656386726, 0.10758835761300424, 0.14483446912023076, 0.12345740298105211, 0.10261924319375187, 0.10458036061411444, 0.10795436059336158]
# Results Tree [0.14485577143022038, 0.10740181324898646, 0.14388776274316267, 0.10514927477966224, 0.10758835327149481, 0.14483446906023564, 0.1234573929562123, 0.10261924309371954, 0.10458036149405879, 0.10795436072238894]
# BED: 0.09606012643808719, Edit: 0.11932968767027326, Tree: 0.11923288028001418

# I.14.3
# all 0

# I.15.10
# Results BED [0.23906208821856584, 0.23906208826560632, 0.23906208821845368, 0.23906208821845049, 0.2638232563942609, 0.27032035443833197, 0.2642483059120766, 0.2049213293096397, 0.2169759352385344, 0.2274458709476729]
# Results Edit [0.3439999750922281, 0.23906208821870648, 0.19967025668823193, 0.23906208821846217, 0.23906208821845046, 0.3439999750922281, 0.2390620882184506, 0.3439999750922281, 0.27032032995320426, 0.3439999750922281]
# Results Tree [0.23906208837881288, 0.2390620882184901, 0.22809756744108806, 0.23906208821845126, 0.2703203299590357, 0.239062088231276, 0.23906208825854508, 0.21089134323538977, 0.23906208821968108, 0.3439999750922281]
# BED: 0.2403983405161593, Edit: 0.28022388398844184, Tree: 0.24876817452529978

# I.16.6
# Results BED [0.38116058201086045, 0.37620823194072844, 0.3754873273420884, 0.37235476757205643, 0.3891411138735245, 0.375487193328749, 0.3967687233632374, 0.36343380100814143, 0.38045022019230884, 0.3764883528925954]
# Results Edit [0.39676872335760416, 0.38748736871257433, 0.39644984453112386, 0.3774726450752413, 0.3891411315668872, 0.39644982473700485, 0.39676872335781793, 0.3924331233905366, 0.3764879936183848, 0.39023706068568326]
# Results Tree [0.3967687233874257, 0.38748736871329936, 0.39676872336898245, 0.3774725620813306, 0.38914113895921565, 0.39644980261245816, 0.396768723363544, 0.3924330493307539, 0.37648798830570857, 0.3902370453794209]
# BED: 0.37869803135243, Edit: 0.38996964390329, Tree: 0.39000151255021

# I.18.12
# Results BED [5.008784811107499, 5.149221814164819, 4.712034388660826, 6.03074329163682, 5.370655649950235, 6.427153410757156, 4.937459064417659, 5.396191325124991, 4.320640853809544, 5.612095657370379]
# Results Edit [5.003372752286123, 4.930643874602608, 3.9839538579805027, 3.771896165840788, 5.06656017910942, 4.82975217835856, 4.97101599504691, 4.572726508650437, 5.228607106606294, 4.923436056766624]
# Results Tree [3.7718035995630603, 4.930643828143942, 3.9839538454964245, 4.5845982610292815, 5.090514203675819, 4.955211736848212, 5.090514203623994, 4.572726508650437, 5.194440876146224, 5.42979547184681]
# BED: 5.2964980267, Edit: 4.7281964675248, Tree: 4.7604202535024

# I.27.6
# Results BED [0.10577492798033905, 0.11735446142428198, 0.14833497846100827, 0.22079816031686714, 0.08842124825893717, 0.09243840587263905, 0.22079815788270596, 0.1934890522203739, 0.12100274584930124, 0.20073959496890983]
# Results Edit [0.10577492838995739, 0.1173545867298264, 0.16058556112566374, 0.2620731755139902, 0.20514380444762725, 0.1697018685082008, 0.23644941519972312, 0.17419584649941827, 0.12100274584893143, 0.1799154529100941]
# Results Tree [0.11530487039031963, 0.11735449350374512, 0.16058558438821632, 0.2620732403983069, 0.08842123072650941, 0.169702107374498, 0.22079815787100138, 0.1741958409672299, 0.12100274584995098, 0.20073848896985155]
# BED: 0.15091517332353638, Edit: 0.17321973851734326, Tree: 0.16301767604396292

# I.30.3
# Results BED [2.2064091219629423, 2.148184061604758, 2.0946943242057374, 2.0946942044511823, 2.0992039763285932, 2.0992039048602082, 2.0992039048715516, 2.0992039048924602, 2.0958819619541633, 2.1657125585540267]
# Results Edit [2.250762329213185, 2.33348959427464, 2.09469420516725, 2.099203904861201, 2.099203905828226, 2.099203905887634, 2.094694212410548, 2.076957028519456, 2.099203904860911, 2.1659315263119785]
# Results Tree [2.250763189807066, 2.230877178530379, 2.094694205417871, 2.0946948690953726, 2.0992039048797726, 2.099203904867446, 2.0992039048600404, 2.099203904952452, 2.0992039048999964, 2.2179863729477116]
# BED: 2.1202391923685626, Edit: 2.141334451733503, Tree: 2.1385035340258107

# I.34.1
# Results BED [0.48931343809060623, 0.06359434926849997, 0.501669795758212, 0.6717431030437001, 0.26850725648255264, 0.5976262113219886, 0.68844301502042, 0.25827917206028095, 0.4067268355408775, 0.48742874711736306]
# Results Edit [0.4801854460965447, 0.637626558794802, 0.5016698045422595, 0.6717431038092447, 0.2685072562470279, 0.6720449147982706, 0.5047691400739068, 0.2582790508618044, 0.4067268300740459, 0.5829848343441696]
# Results Tree [0.45849767907827066, 0.7242010333935264, 0.5016698539085482, 0.6717433708872631, 0.26850725657104657, 0.817807306074765, 0.6884444452273192, 0.25827905194876294, 0.4812626715732366, 0.5751063839409544]
# BED: 0.4433331923704501, Edit: 0.4984536939642076, Tree: 0.5445519052603693

# I.34.14
# Results BED [0.11039483611339349, 0.14136273290243845, 0.32238948114130067, 0.3812274605871998, 0.1847608201500517, 0.47838055421096537, 0.463718912957892, 0.11258159316043838, 0.3295437596533161, 0.39624955414177143]
# Results Edit [0.38436376679772244, 0.29584182491270766, 0.3223894936519551, 0.24012904206131466, 0.11618889235178764, 0.557454967835075, 0.4637189106823776, 0.1125808827254854, 0.30944905095365116, 0.44188742935455755]
# Results Tree [0.3843637669220393, 0.48981310819265034, 0.322389467283292, 0.3812274605801718, 0.11618896893636668, 0.5373253478664326, 0.4637189094532901, 0.3033213852184012, 0.3094479292184066, 0.44188742923007174]
# BED: 0.29206097050187674, Edit: 0.32440042613266346, Tree: 0.37496837729011223

# I.37.4
# Results BED [2.040343573980915, 2.1783823986617095, 2.117681886979423, 2.276789513569979, 2.32928146040308, 2.3396262176504172, 2.1379307544732016, 2.4018991454810106, 2.4207502967335364, 2.4269521274753725]
# Results Edit [2.0403435840017274, 2.3526650765863657, 2.345758313114675, 1.2002513293153068, 2.298091029160607, 2.3808723657796245, 2.274668151558783, 2.293271375567685, 2.4207502991508805, 2.4269521290997784]
# Results Tree [2.0403435665821026, 2.352665011118273, 2.420007642012583, 1.200251310095761, 2.227590662627939, 2.3808723530606373, 2.016113030485888, 2.293271314171604, 2.420750296121558, 2.42695212960928]
# BED: 2.266963737540865, Edit: 2.2033623653335432, Tree: 2.1778817315885624

# I.39.11
# Results BED [0.707422872182526, 1.849437356539894, 1.4221671697833917, 1.6493141123340822, 0.8627003373956347, 1.3425189290669584, 1.0513493130090477, 0.707422872183841, 0.6852696059306963, 1.5017055636622996]
# Results Edit [0.7074228721822606, 1.4622206127680655, 0.7074228724575556, 1.9619896034707025, 1.5451027600581952, 1.3425190234571864, 0.6492907912895651, 0.7074229308354145, 0.6852697268327431, 1.5017055636623]
# Results Tree [0.7074228722086473, 0.707422872351252, 0.5704803028239107, 1.9619896075505243, 1.4390761466330193, 0.4370436376146691, 0.7074228731428155, 0.7074228722059979, 0.7074228721822228, 1.109190955114829]
# BED: 1.177930813208837, Edit: 1.1270366757013988, Tree: 0.9054895011827888

#  I.47.23
# Results BED [0.13912390451427475, 0.15811470534997826, 0.39636219403858874, 0.4617111738229535, 0.10688491080690894, 0.22804261962946173, 0.40197804814595783, 0.2671397009884714, 0.319707527029471, 0.38752182258638745]
# Results Edit [0.1391239042540395, 0.1581147058447008, 0.3963623258575599, 0.4019780477411429, 0.4171113534369654, 0.22804263748142667, 0.4019780474972419, 0.2671396632664545, 0.319707526316978, 0.38752237615015966]
# Results Tree [0.139123904616248, 0.15811470583802162, 0.3963621941177992, 0.46171136678421226, 0.41711164253695565, 0.22804264263064977, 0.4019780476313992, 0.19084787025860817, 0.31970752630555055, 0.38752166077380873]
# BED: 0.28665866069124535, Edit: 0.31170805878466695, Tree: 0.3100521561493253

# I.6.2b
# Results BED [0.036333539251696335, 0.03403404845303652, 0.0363335375442705, 0.03403381216591677, 0.0350801307440351, 0.03402977669388863, 0.03508013079108159, 0.034676834507535316, 0.03471427712323654, 0.03633353762558994]
# Results Edit [0.034033809906492345, 0.03403380990412096, 0.03403380990399293, 0.03403380990920502, 0.035080128236369114, 0.03402978136440301, 0.03508013413701178, 0.03467684446798046, 0.03471424377624792, 0.03633353750606342]
# Results Tree [0.03633353750531922, 0.03403380993147479, 0.03403382643405718, 0.03403380990395634, 0.03508012723604818, 0.034029776559899964, 0.03508013301203481, 0.03403380991403595, 0.03471427559727621, 0.035263624407280925]
# BED: 0.03506496249002873, Edit: 0.034604990911188696, Tree: 0.03466367305013836

# II.10.9
# Results BED [0.061256205104631055, 0.12859053629944994, 0.06125620528379015, 0.06125620510757359, 0.06125621194294035, 0.08411592855500595, 0.04810165452395801, 0.12860034792075167, 0.051736171457952854, 0.1748174585140695]
# Results Edit [0.19376545914575538, 0.19376545912720616, 0.061256248079967546, 0.1286003486444182, 0.11286285281941287, 0.08411540916382154, 0.04810166392615152, 0.12860034791331112, 0.05173617343479019, 0.07812786682467375]
# Results Tree [0.1893200504293372, 0.19475382429475374, 0.0612562051559956, 0.10671608750541148, 0.1286003505978285, 0.08411569313232062, 0.1286003479256821, 0.1286003479611042, 0.05173618419155992, 0.07812866358513827]
# BED: 0.0860986924710123, Edit: 0.10809318290795082, Tree: 0.11518277547791318